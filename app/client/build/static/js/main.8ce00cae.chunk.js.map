{"version":3,"sources":["components/SampleComponent/SampleComponent.js","store/actions/actionTypes.js","store/actions/sampleActions.js","store/actions/errorActions.js","store/actions/authActions.js","containers/SampleContainer/SampleContainer.js","Layout/Layout.js","store/reducers/errorsReducer.js","store/reducers/sample.js","store/reducers/authReducer.js","store/reducers/index.js","axiosConfig.js","store/sagas/sampleSaga.js","store/sagas/authSaga.js","store/sagas/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["SampleComponent","props","react_default","a","createElement","className","title","id","GET_POSTS_INIT","USER_LOAD_INIT","USER_LOADING","AUTH_ERROR","getPostsSuccess","posts","type","payload","getErrors","errors","loadUserInit","actionTypes","loadUserSuccess","loginSuccess","token","user","SampleContainer","state","hasPosts","btnOnClick","event","_this","getPosts","_this2","this","sampleComponents","SampleComponent_SampleComponent","map","post","key","href","onClick","Component","connect","sample","dispatch","actions","getError","error","Layout","containers_SampleContainer_SampleContainer","initialState","reducer","arguments","length","undefined","action","console","log","Object","objectSpread","postsLoaded","localStorage","getItem","isAuthenticated","isLoading","userLoading","userLoaded","setItem","setUserAuthentication","removeItem","resetAuthentication","combineReducers","errorsReducer","sampleReducer","auth","authReducer","process","instance","axios","create","baseURL","REACT_APP_DOMAIN","getPostsSaga","test","response","regenerator_default","wrap","_context","prev","next","axiosConfig","get","sent","put","data","t0","stop","_marked","loadUserSaga","body","tryPostRes","_tryPostRes$data","_context2","actionsTypes","email","password","axiosInstance","_marked2","watchPosts","watchAuth","takeEvery","sampleSaga","sagas_marked","authSaga","sagas_marked2","sagaMiddleware","createSagaMiddleware","middleware","thunk","composeEnhancers","compose","store","createStore","rootReducer","applyMiddleware","apply","forEach","saga","run","App","Layout_Layout_Layout","Boolean","window","location","hostname","match","app","es","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ce00cae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SampleComponent.css\";\r\n\r\nexport default function SampleComponent(props) {\r\n  return (\r\n    <div className=\"Component\">\r\n      <h2>I'm a component</h2>\r\n      <h3>My title is: {props.title}</h3>\r\n      <h4>ID: {props.id}</h4>\r\n    </div>\r\n  );\r\n}\r\n","export const GET_POSTS_INIT = \"GET_POSTS_INIT\";\r\nexport const GET_POSTS_SUCCESS = \"GET_POSTS_SUCCESS\";\r\nexport const GET_POSTS_FAILED = \"GET_POSTS_FAILED\";\r\n\r\nexport const USER_LOAD_INIT = \"USER_LOAD_INIT\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const USER_LOADED = \"USER_LOADED\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const getPostsInit = () => {\r\n  return {\r\n    type: actionTypes.GET_POSTS_INIT\r\n  };\r\n};\r\n\r\nexport const getPostsSuccess = posts => {\r\n  return {\r\n    type: actionTypes.GET_POSTS_SUCCESS,\r\n    payload: { posts: posts }\r\n  };\r\n};\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\n// GET ERRORS\r\nexport const getErrors = errors => {\r\n  return {\r\n    type: actionTypes.GET_ERRORS,\r\n    payload: { errors: errors }\r\n  };\r\n};\r\n\r\n// Clear errors\r\nexport const clearErrors = errors => {\r\n  return {\r\n    type: actionTypes.CLEAR_ERRORS,\r\n    payload: { errors: errors }\r\n  };\r\n};\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport { select } from \"redux-saga/effects\";\r\n\r\n// Check token and load user\r\nexport const loadUserInit = () => {\r\n  return {\r\n    type: actionTypes.USER_LOAD_INIT\r\n  };\r\n};\r\n\r\nexport const loadUserSuccess = () => {\r\n  return {\r\n    type: actionTypes.USER_LOADED\r\n  };\r\n};\r\n\r\nexport const loginSuccess = (token, user) => {\r\n  return {\r\n    type: actionTypes.LOGIN_SUCCESS,\r\n    payload: { token: token, user: user }\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport SampleComponent from \"../../components/SampleComponent/SampleComponent\";\r\nimport \"./SampleContainer.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions\";\r\n\r\nclass SampleContainer extends Component {\r\n  state = {\r\n    hasPosts: false\r\n  };\r\n  btnOnClick = event => {\r\n    this.props.getPosts();\r\n  };\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.posts) {\r\n      return {\r\n        hasPosts: true\r\n      };\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let sampleComponents = <SampleComponent />;\r\n    if (this.state.hasPosts) {\r\n      sampleComponents = this.props.posts.map(post => {\r\n        return (\r\n          <SampleComponent key={post.id} title={post.title} id={post.id} />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div className=\"SampleContainer\">\r\n        <h1>I am a container</h1>\r\n        <a href=\"##\" className=\"btn\" onClick={event => this.btnOnClick(event)}>\r\n          Send request!\r\n        </a>\r\n        {sampleComponents}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    posts: state.sample.posts\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getPosts: () => dispatch(actions.loadUserInit()),\r\n    getError: () => dispatch(actions.getErrors({ error: \"Error\" }))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SampleContainer);\r\n","import React, { Component } from \"react\";\r\nimport SampleContainer from \"../containers/SampleContainer/SampleContainer\";\r\nimport \"./Layout.css\";\r\n// import { Route, Switch } from \"react-router-dom\";\r\n\r\nexport default class Layout extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Layout\">\r\n        <h1>Layout Component</h1>\r\n        <SampleContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  errors: {}\r\n};\r\n\r\nconst getErrors = (state, action) => {\r\n  console.log(\"HERE\", action);\r\n  state = {\r\n    ...state,\r\n    errors: action.payload.errors\r\n  };\r\n  return state;\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_ERRORS:\r\n      return getErrors(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  postsLoaded: false\r\n};\r\n\r\nconst getPosts = (state, action) => {\r\n  console.log(\"HERE\", action);\r\n  state = {\r\n    ...state,\r\n    posts: action.posts,\r\n    postsLoaded: true\r\n  };\r\n  return state;\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_POSTS_SUCCESS:\r\n      return getPosts(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  token: localStorage.getItem(\"token\"),\r\n  isAuthenticated: null,\r\n  isLoading: null,\r\n  user: null\r\n};\r\n\r\nconst userLoading = (state, action) => {\r\n  state = {\r\n    ...state,\r\n    isLoading: true\r\n  };\r\n  return state;\r\n};\r\n\r\nconst userLoaded = (state, action) => {\r\n  state = {\r\n    ...state,\r\n    isLoading: false,\r\n    isAuthenticated: true,\r\n    user: action.payload.user\r\n  };\r\n  return state;\r\n};\r\n\r\nconst setUserAuthentication = (state, action) => {\r\n  localStorage.setItem(\"token\", action.payload.token);\r\n  state = {\r\n    ...state,\r\n    isLoading: false,\r\n    isAuthenticated: true,\r\n    user: action.payload.user,\r\n    token: action.payload.token\r\n  };\r\n  return state;\r\n};\r\n\r\nconst resetAuthentication = (state, action) => {\r\n  localStorage.removeItem(\"token\");\r\n  state = {\r\n    ...state,\r\n    token: null,\r\n    user: null,\r\n    isAuthenticated: false,\r\n    isLoading: false\r\n  };\r\n\r\n  return state;\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.USER_LOADING:\r\n      return userLoading(state, action);\r\n    case actionTypes.USER_LOADED:\r\n      return userLoaded(state, action);\r\n    case actionTypes.LOGIN_SUCCESS:\r\n    case actionTypes.REGISTER_SUCCESS:\r\n      return setUserAuthentication(state, action);\r\n    case actionTypes.AUTH_ERROR:\r\n    case actionTypes.LOGIN_FAIL:\r\n    case actionTypes.LOGOUT_SUCCESS:\r\n    case actionTypes.REGISTER_FAIL:\r\n      return resetAuthentication(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\nimport errorsReducer from \"./errorsReducer\";\r\nimport sampleReducer from \"./sample\";\r\nimport authReducer from \"./authReducer\";\r\n\r\nexport default combineReducers({\r\n  errors: errorsReducer,\r\n  sample: sampleReducer,\r\n  auth: authReducer\r\n});\r\n","import axios from \"axios\";\r\nconsole.log(process.env);\r\nconst instance = axios.create({\r\n  baseURL: process.env.REACT_APP_DOMAIN\r\n});\r\n\r\nexport default instance;\r\n","import { put } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport axiosConfig from \"../../axiosConfig\";\r\nimport * as actions from \"../actions\";\r\n\r\nexport function* getPostsSaga(action) {\r\n  console.log(action);\r\n  try {\r\n    let test = yield axiosConfig.get(\"/api/user/test\");\r\n    console.log(test);\r\n    let response = yield axios.get(\r\n      \"https://my-json-server.typicode.com/typicode/demo/posts\"\r\n    );\r\n    yield put(actions.getPostsSuccess(response.data));\r\n  } catch (errors) {\r\n    yield console.log(\"ERROR\", errors.response.data);\r\n    yield put(actions.getErrors(errors.response.data));\r\n  }\r\n}\r\n","import { put, select } from \"redux-saga/effects\";\r\nimport axiosInstance from \"../../axiosConfig\";\r\nimport * as actions from \"../actions\";\r\nimport * as actionsTypes from \"../actions/actionTypes\";\r\n\r\nexport function* tokenConfig() {\r\n  const state = yield select();\r\n  console.log(state);\r\n\r\n  // Get token from storage\r\n  const token = state.auth.token;\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-type\": \"application\"\r\n    }\r\n  };\r\n\r\n  // If token then add to headers\r\n  if (token) {\r\n    yield (config.headers[\"x-auth-token\"] = token);\r\n  }\r\n\r\n  return config;\r\n}\r\nexport function* loadUserSaga(action) {\r\n  console.log(action);\r\n\r\n  yield put({ type: actionsTypes.USER_LOADING });\r\n\r\n  // const config = tokenConfig().next().value;\r\n  // console.log(\"TOKEN\", config);\r\n  try {\r\n    // const response = yield axiosInstance.get(\"/api/auth/user\", config);\r\n    // console.log(response.data);\r\n    let body = {\r\n      email: \"baileyjarron@gmail.com\",\r\n      password: \"password\"\r\n    };\r\n\r\n    const tryPostRes = yield axiosInstance.post(\"/api/auth\", body);\r\n    console.log(tryPostRes.data);\r\n    const { token, user } = tryPostRes.data;\r\n    yield put(actions.loginSuccess(token, user));\r\n    yield put(actions.loadUserSuccess());\r\n  } catch (error) {\r\n    console.log(error.response.data.errors);\r\n    yield put({ type: actionsTypes.AUTH_ERROR });\r\n    yield put(actions.getErrors(error.response.data.errors));\r\n  }\r\n}\r\n","import { takeEvery } from \"redux-saga/effects\";\r\nimport * as actionTypes from \"../actions/actionTypes\";\r\nimport * as sampleSaga from \"./sampleSaga\";\r\nimport * as authSaga from \"./authSaga\";\r\n\r\nexport function* watchPosts() {\r\n  yield takeEvery(actionTypes.GET_POSTS_INIT, sampleSaga.getPostsSaga);\r\n}\r\n\r\nexport function* watchAuth() {\r\n  console.log(\"object\");\r\n  yield takeEvery(actionTypes.USER_LOAD_INIT, authSaga.loadUserSaga);\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { watchPosts, watchAuth } from \"./sagas/index\";\r\n\r\nconst initialState = {};\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middleware = [thunk, sagaMiddleware];\r\n\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    : null || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nconst sagas = [watchPosts, watchAuth];\r\n\r\nsagas.forEach(saga => {\r\n  sagaMiddleware.run(saga);\r\n});\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Layout from \"./Layout/Layout\";\r\nimport { loadUserInit } from \"./store/actions/authActions\";\r\nimport store from \"./store\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    store.dispatch(loadUserInit());\r\n  }\r\n  render() {\r\n    return <Layout />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}