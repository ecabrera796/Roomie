{"version":3,"sources":["components/SampleComponent/SampleComponent.js","store/actions/actionTypes.js","store/actions/sample.js","store/actions/errors.js","containers/SampleContainer/SampleContainer.js","Layout/Layout.js","App.js","serviceWorker.js","store/reducers/errorsReducer.js","store/reducers/sample.js","store/reducers/index.js","store/sagas/sample.js","store/sagas/index.js","store/index.js","index.js"],"names":["SampleComponent","props","react_default","a","createElement","className","title","id","GET_POSTS_INIT","getPostsSuccess","posts","type","getErrors","errors","SampleContainer","state","hasPosts","btnOnClick","event","_this","getPosts","_this2","this","sampleComponents","SampleComponent_SampleComponent","map","post","key","href","onClick","Component","connect","sample","dispatch","actionTypes","getError","actions","error","Layout","containers_SampleContainer_SampleContainer","App","Layout_Layout_Layout","Boolean","window","location","hostname","match","initialState","reducer","arguments","length","undefined","action","console","log","Object","objectSpread","postsLoaded","combineReducers","errorsReducer","sampleReducer","getPostsSaga","response","regenerator_default","wrap","_context","prev","next","axios","get","sent","put","data","t0","stop","_marked","watchPosts","takeEvery","sampleSaga","sagas_marked","sagaMiddleware","createSagaMiddleware","middleware","thunk","composeEnhancers","compose","store","createStore","rootReducer","applyMiddleware","apply","sagas","run","app","es","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfd7070e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SampleComponent.css\";\r\n\r\nexport default function SampleComponent(props) {\r\n  return (\r\n    <div className=\"Component\">\r\n      <h2>I'm a component</h2>\r\n      <h3>My title is: {props.title}</h3>\r\n      <h4>ID: {props.id}</h4>\r\n    </div>\r\n  );\r\n}\r\n","export const GET_POSTS_INIT = \"GET_POSTS_INIT\";\r\nexport const GET_POSTS_SUCCESS = \"GET_POSTS_SUCCESS\";\r\nexport const GET_POSTS_FAILED = \"GET_POSTS_FAILED\";\r\n\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const getPostsInit = () => {\r\n  return {\r\n    type: actionTypes.GET_POSTS_INIT\r\n  };\r\n};\r\n\r\nexport const getPostsSuccess = posts => {\r\n  return {\r\n    type: actionTypes.GET_POSTS_SUCCESS,\r\n    posts: posts\r\n  };\r\n};\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\n// GET ERRORS\r\nexport const getErrors = errors => {\r\n  return {\r\n    type: actionTypes.GET_ERRORS,\r\n    errors: errors\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport SampleComponent from \"../../components/SampleComponent/SampleComponent\";\r\nimport \"./SampleContainer.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions\";\r\n\r\nclass SampleContainer extends Component {\r\n  state = {\r\n    hasPosts: false\r\n  };\r\n  btnOnClick = event => {\r\n    this.props.getPosts();\r\n  };\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.posts) {\r\n      return {\r\n        hasPosts: true\r\n      };\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let sampleComponents = <SampleComponent />;\r\n    if (this.state.hasPosts) {\r\n      sampleComponents = this.props.posts.map(post => {\r\n        return (\r\n          <SampleComponent key={post.id} title={post.title} id={post.id} />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div className=\"SampleContainer\">\r\n        <h1>I am a container</h1>\r\n        <a href=\"##\" className=\"btn\" onClick={event => this.btnOnClick(event)}>\r\n          Send request!\r\n        </a>\r\n        {sampleComponents}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    posts: state.sample.posts\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getPosts: () => dispatch(actions.getPostsInit()),\r\n    getError: () => dispatch(actions.getErrors({ error: \"Error\" }))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SampleContainer);\r\n","import React, { Component } from \"react\";\r\nimport SampleContainer from \"../containers/SampleContainer/SampleContainer\";\r\nimport \"./Layout.css\";\r\n// import { Route, Switch } from \"react-router-dom\";\r\n\r\nexport default class Layout extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Layout\">\r\n        <h1>Layout Component</h1>\r\n        <SampleContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Layout from \"./Layout/Layout\";\n\nclass App extends Component {\n  render() {\n    return <Layout />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  errors: {}\r\n};\r\n\r\nconst getErrors = (state, action) => {\r\n  console.log(\"HERE\", action);\r\n  state = {\r\n    ...state,\r\n    errors: action.errors\r\n  };\r\n  return state;\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_ERRORS:\r\n      return getErrors(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  postsLoaded: false\r\n};\r\n\r\nconst getPosts = (state, action) => {\r\n  console.log(\"HERE\", action);\r\n  state = {\r\n    ...state,\r\n    posts: action.posts,\r\n    postsLoaded: true\r\n  };\r\n  return state;\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_POSTS_SUCCESS:\r\n      return getPosts(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\nimport errorsReducer from \"./errorsReducer\";\r\nimport sampleReducer from \"./sample\";\r\n\r\nexport default combineReducers({\r\n  errors: errorsReducer,\r\n  sample: sampleReducer\r\n});\r\n","import { put } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport * as actions from \"../actions\";\r\n\r\nexport function* getPostsSaga(action) {\r\n  console.log(action);\r\n  try {\r\n    let response = yield axios.get(\r\n      \"https://my-json-server.typicode.com/typicode/demo/posts\"\r\n    );\r\n    yield put(actions.getPostsSuccess(response.data));\r\n  } catch (errors) {\r\n    yield console.log(\"ERROR\", errors.response.data);\r\n    yield put(actions.getErrors(errors.response.data));\r\n  }\r\n}\r\n","import { takeEvery } from \"redux-saga/effects\";\r\nimport * as actionTypes from \"../actions/actionTypes\";\r\nimport * as sampleSaga from \"./sample\";\r\n\r\nexport function* watchPosts() {\r\n  yield takeEvery(actionTypes.GET_POSTS_INIT, sampleSaga.getPostsSaga);\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { watchPosts } from \"./sagas/index\";\r\n\r\nconst initialState = {};\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middleware = [thunk, sagaMiddleware];\r\n\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    : null || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nconst sagas = [watchPosts];\r\n\r\nsagaMiddleware.run(...sagas);\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}